@model CarRentalManagement.Models.Booking

@{
    ViewData["Title"] = "Add Booking";
}

<div class="container mt-5">
    <h1 class="display-4 text-center mb-4">Add New Booking</h1>

    @if (ViewBag.NoCarsMessage != null)
    {
        <div class="alert alert-danger">
            <p>@ViewBag.NoCarsMessage</p>
        </div>
    }

    @if (ViewBag.NoCustomersMessage != null)
    {
        <div class="alert alert-danger">
            <p>@ViewBag.NoCustomersMessage</p>
        </div>
    }

    <form asp-action="Add" asp-controller="Booking" method="post" id="bookingForm">
        <div class="form-group">
            <label for="CarId">Car</label>
            <select class="form-control" id="CarId" asp-for="CarId" required>
                @if (ViewBag.Cars is IEnumerable<CarRentalManagement.Models.Car> cars && cars.Any())
                {
                    @foreach (var car in cars)
                    {
                        <option value="@car.Id">@car.Model</option>
                    }
                }
                else
                {
                    <option disabled>No cars available</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="CustomerId">Customer</label>
            <select class="form-control" id="CustomerId" required>
                <option value="" disabled selected>Loading customers...</option>
            </select>
            <span class="text-danger" id="customerError" style="display:none;">Failed to load customers.</span>
        </div>

        <div class="form-group">
            <label for="BookingDate">Booking Date</label>
            <input type="datetime-local" class="form-control" id="BookingDate" asp-for="BookingDate" required />
        </div>

        <div class="form-group">
            <label for="ReturnDate">Return Date</label>
            <input type="datetime-local" class="form-control" id="ReturnDate" asp-for="ReturnDate" required />
            <span class="text-danger" id="returnDateError" style="display:none;">Return date must be after the booking date.</span>
        </div>

        <div class="form-group text-center">
            <button type="submit" class="btn btn-primary btn-lg">Add Booking</button>
        </div>
    </form>
</div>

<style>
    .container {
        max-width: 600px;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .display-4 {
        font-weight: 600;
    }
</style>

<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

<script>
    $(document).ready(function () {
        function fetchCustomers() {
            const customerDropdown = $("#CustomerId");
            const errorMessage = $("#customerError");

            customerDropdown.empty().append('<option value="" disabled selected>Loading customers...</option>');
            errorMessage.hide();

            $.ajax({
                url: "http://localhost:5171/api/Customer",
                method: "GET",
                success: function (data) {
                    console.log("API Response:", data);

                    customerDropdown.empty(); // Clear existing options

                    if (Array.isArray(data) && data.length > 0) {
                        data.forEach(customer => {
                            customerDropdown.append(
                                `<option value="${customer.id}">${customer.firstName} ${customer.lastName} (${customer.email})</option>`
                            );
                        });
                        customerDropdown.prepend('<option value="" disabled selected>Select a customer</option>');
                    } else {
                        customerDropdown.append('<option value="" disabled>No customers available</option>');
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error("AJAX Error:", textStatus, errorThrown); // Debug: Log errors
                    errorMessage.text("Failed to load customers. Please try again later.").show();
                    customerDropdown.empty().append('<option value="" disabled>No customers available</option>');
                }
            });
        }

        // Initialize fetch customers
        fetchCustomers();

        // Date validation logic
        const now = new Date();
        const formattedNow = now.toISOString().slice(0, 16);
        $('#BookingDate').attr('min', formattedNow);
        $('#ReturnDate').attr('min', formattedNow);

        $('#BookingDate').change(function () {
            const bookingDate = new Date($(this).val());
            const formattedBookingDate = bookingDate.toISOString().slice(0, 16);

            $('#ReturnDate').attr('min', formattedBookingDate);

            if (bookingDate < now) {
                $('#bookingDateError').text("Booking date cannot be in the past.").show();
            } else {
                $('#bookingDateError').hide(); 
            }
        });

        $('#ReturnDate').change(function () {
            const bookingDate = new Date($('#BookingDate').val());
            const returnDate = new Date($(this).val());

            if (returnDate > bookingDate) {
                $('#returnDateError').hide();
            } else {
                $('#returnDateError').text("Return date must be after the booking date.").show();
            }
        });

        $('#bookingForm').submit(function (e) {
            const bookingDate = new Date($('#BookingDate').val());
            const returnDate = new Date($('#ReturnDate').val());
            let isValid = true; 

            if (bookingDate < now) {
                $('#bookingDateError').text("Booking date cannot be in the past.").show();
                isValid = false;
            } else {
                $('#bookingDateError').hide();
            }

            if (returnDate <= bookingDate) {
                $('#returnDateError').text("Return date must be after the booking date.").show();
                isValid = false;
            } else {
                $('#returnDateError').hide();
            }

            if (!isValid) {
                e.preventDefault();
            }
        });
    });
</script>
